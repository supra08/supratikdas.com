---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { CollectionEntry } from "astro:content";

import FormattedDate from "../FormattedDate.astro";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	post: CollectionEntry<"post">;
	withDesc?: boolean;
};

const { as: Tag = "div", post, withDesc = true } = Astro.props;
const postDate = post.data.updatedDate ?? post.data.publishDate;
---

<a
	class="block w-full transition-transform hover:scale-[1.02]"
	data-astro-prefetch
	href={`/posts/${post.slug}/`}
>
	<div
		class="flex w-full flex-col border border-gray-100 p-4 shadow-md transition-shadow hover:shadow-xl dark:border-transparent dark:shadow-[0_4px_12px_rgba(0,0,0,0.3)] dark:hover:shadow-[0_8px_24px_rgba(0,0,0,0.4)]"
		style="background-color: hsl(var(--theme-bg-card));"
	>
		<div class="mb-2 flex flex-row items-start justify-between gap-4">
			<Tag class="flex-1 text-left">
				{post.data.draft && <span class="text-sm font-bold text-accent-2">(Draft) </span>}
				<span
					class="text-md cactus-link font-sans leading-tight tracking-tight transition-colors hover:text-accent focus:text-accent"
				>
					{post.data.title}
				</span>
			</Tag>
			<FormattedDate
				class="min-w-[90px] flex-shrink-0 text-right font-sans text-sm text-accent-2"
				date={postDate}
			/>
		</div>
		{
			withDesc && (
				<p class="mt-0 line-clamp-2 block w-full font-sans text-sm leading-relaxed text-textColor">
					{post.data.description}
				</p>
			)
		}
	</div>
</a>
