---
import { createClient } from "@supabase/supabase-js";
const supabaseUrl = import.meta.env.SUPABASE_URL;
const supabaseKey = import.meta.env.SUPABASE_KEY;
---

<form id="subscribe-form" class="subscribe-form">
	<div class="form-group">
		<label for="name">Name (optional)</label>
		<input type="text" id="name" name="name" placeholder="Enter your name" />
	</div>
	<div class="form-group">
		<label for="email">Email</label>
		<input type="email" id="email" name="email" required placeholder="Enter your email" />
	</div>
	<button type="submit" class="subscribe-button">Subscribe</button>
	<div id="subscribe-message" class="message"></div>
</form>

<script define:vars={{ supabaseUrl, supabaseKey }}>
	if (typeof window !== "undefined") {
		import("https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm").then(({ createClient }) => {
			const supabase = createClient(supabaseUrl, supabaseKey);

			const form = document.getElementById("subscribe-form");
			const messageDiv = document.getElementById("subscribe-message");

			form.addEventListener("submit", async (e) => {
				e.preventDefault();
				messageDiv.textContent = "";
				const formData = new FormData(form);
				const email = formData.get("email");
				const name = formData.get("name");
				if (!email || !/^\S+@\S+\.\S+$/.test(email)) {
					messageDiv.textContent = "Please enter a valid email address.";
					messageDiv.className = "message error";
					return;
				}
				form.querySelector('button[type="submit"]').disabled = true;
				const { data, error } = await supabase
					.from("subscribers")
					.insert([{ email, name }])
					.select();
				if (error) {
					if (error.code === "23505") {
						messageDiv.textContent = "This email is already subscribed.";
					} else {
						messageDiv.textContent = "Subscription failed. Please try again.";
					}
					messageDiv.className = "message error";
				} else {
					messageDiv.textContent = "Thank you for subscribing!";
					messageDiv.className = "message success";
					form.reset();

					// Send welcome email (commented out for now)
					/*
					try {
						const welcomeResponse = await fetch(
							"https://qplnzqliygxjiydsmgui.supabase.co/functions/v1/send-newsletter",
							{
								method: "POST",
								headers: {
									"Content-Type": "application/json",
									Authorization: `Bearer ${supabaseKey}`,
								},
								body: JSON.stringify({
									action: "send-welcome",
									postData: { subscriberId: data[0].id },
								}),
							},
						);
						if (welcomeResponse.ok) {
							console.log("Welcome email sent successfully");
						}
					} catch (welcomeError) {
						console.error("Failed to send welcome email:", welcomeError);
					}
					*/
				}
				form.querySelector('button[type="submit"]').disabled = false;
			});
		});
	}
</script>

<style>
	.subscribe-form {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		max-width: 400px;
		padding: 1rem;
		background-color: hsl(var(--theme-bg-card));
		box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
	}

	.form-group {
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
	}

	.form-group label {
		font-weight: 500;
		color: hsl(var(--theme-text));
		font-size: 0.875rem;
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}

	.form-group input {
		padding: 0.5rem;
		font-size: 0.875rem;
		border: 1px solid hsl(var(--theme-accent-2));
		background: hsl(var(--theme-bg));
		transition: border-color 0.15s ease;
		width: 100%;
		box-sizing: border-box;
		font-family: inherit;
	}

	.form-group input:focus {
		outline: none;
		border-color: hsl(var(--theme-accent));
	}

	.form-group input::placeholder {
		color: hsl(var(--theme-quote));
	}

	.subscribe-button {
		background: hsl(var(--theme-accent));
		color: hsl(var(--theme-bg));
		padding: 0.5rem 1rem;
		font-size: 0.875rem;
		font-weight: 500;
		border: none;
		cursor: pointer;
		transition: background-color 0.15s ease;
		text-transform: uppercase;
		letter-spacing: 0.05em;
		font-family: inherit;
		margin-top: 0.5rem;
	}

	.subscribe-button:hover {
		background: hsl(var(--theme-accent-2));
	}

	.subscribe-button:disabled {
		background: hsl(var(--theme-quote));
		cursor: not-allowed;
	}

	.message {
		padding: 0.5rem;
		font-size: 0.875rem;
		font-weight: 500;
		margin-top: 0.5rem;
	}

	.message.success {
		color: hsl(var(--theme-text));
		background: hsl(var(--theme-bg));
		border: 1px solid hsl(var(--theme-accent-2));
	}

	.message.error {
		color: hsl(var(--theme-text));
		background: hsl(var(--theme-bg));
		border: 1px solid hsl(var(--theme-accent-2));
	}
</style>
